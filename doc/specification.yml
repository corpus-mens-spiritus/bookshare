swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Bookshare"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
  - name: "library"
    description: "Operations to be done for the libraries"
schemes:
  - "https"
  - "http"
paths:
  /book:
    post:
      tags:
        - "book"
      summary: "Adds a new book to a library"
      description: ""
      operationId: "addBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Data of the book to be added"
          required: true
          schema:
            $ref: "#/definitions/BookCreationRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BookCreationResponse"
        405:
          description: "Invalid input"
    put:
      tags:
        - "book"
      summary: "Modifies a book of the library"
      description: ""
      operationId: "modifyBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Data of the book to be modified"
          required: true
          schema:
            $ref: "#/definitions/BookCreationRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BookCreationResponse"
        405:
          description: "Invalid input"
  /books:
    get:
      tags:
        - "books"
      summary: "Gets the list of available books"
      description: ""
      operationId: "getBooks"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Data of the book to be added"
          required: true
          schema:
            $ref: "#/definitions/BookCreationRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BookCreationResponse"
        405:
          description: "Invalid input"
  /group:
    post:
      tags:
        - "group"
      summary: "Adds a new group of libraries"
      description: ""
      operationId: "addGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Property id and contact of the new library"
          required: true
          schema:
            $ref: "#/definitions/GroupCreationRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GroupCreationResponse"
        405:
          description: "Invalid input"
  /library:
    post:
      tags:
        - "library"
      summary: "Adds a new library"
      description: ""
      operationId: "addLibrary"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Property id and contact of the new library"
          required: true
          schema:
            $ref: "#/definitions/LibraryCreationRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/LibraryCreationResponse"
        405:
          description: "Invalid input"

  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

definitions:
  BookCreationRequest:
    type: "object"
    properties:
      id:
        type: "string"

  BookCreationResponse:
    type: "object"
    properties:
      id:
        type: "string"

  GroupCreationRequest:
    type: "object"
    properties:
      name:
        type: "string"
      location:
        $ref: "#/definitions/Location"
      adminId:
        type: "string"

  GroupCreationResponse:
    type: "object"
    properties:
      id:
        type: "string"

  LibraryCreationRequest:
    type: "object"
    properties:
      groupId:
        type: "string"
      propertyName:
        type: "string"
      contactName:
        type: "string"
      owner:
        type: "string"

  LibraryCreationResponse:
    type: "object"
    properties:
      id:
        type: "string"

  Location:
    type: "object"
    properties:
      town:
        type: "string"
      country:
        type: "string"

  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
